<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未知</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.dtask.idv.tw/"/>
  <updated>2018-04-01T17:23:03.071Z</updated>
  <id>https://blog.dtask.idv.tw/</id>
  
  <author>
    <name>Duncan Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>透過 Pre-request Script 取得 Token 後呼叫 API</title>
    <link href="https://blog.dtask.idv.tw/Postman/Postman_PreRequestScript_Token_API/"/>
    <id>https://blog.dtask.idv.tw/Postman/Postman_PreRequestScript_Token_API/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-04-01T17:23:03.071Z</updated>
    
    <content type="html"><![CDATA[<p>在 2017 年寫了一篇 「<a href="https://blog.dtask.idv.tw/Postman/Postman_Token_Response_API/">使用 Postman 取得 Token 打另一隻 API</a>」，而那篇使用的方式是透過 Runner 的方式來達到取得 Token 再來打 API，其實還是有點麻煩，因為無法直接在單一一個 Collection 下 Send 就好。</p>
<p>而這邊來說一下如何直接在單一一個 Collection 下 Send 來取得 Token 並且呼叫 API 。</p>
<a id="more"></a>
<h2 id="Pre-request-Script"><a href="#Pre-request-Script" class="headerlink" title="Pre-request Script"></a>Pre-request Script</h2><p>在 Postman 裡，每個 Collection 都有自己的 Pre-request Script ，而這個 Script 執行的時間點顧名思義就是在此 Collection Send 之前會先處理的 Script ，因此現在主要想要先取得 Token 後再做 Send ，所以就要把取得 Token 的動作放在 Pre-request Script 來處理了。</p>
<h3 id="Token-API"><a href="#Token-API" class="headerlink" title="Token API"></a>Token API</h3><blockquote>
<p>首先要先確認 Token API 的呼叫方式以及回傳格式。</p>
</blockquote>
<p>此範列以 form-data 方式 呼叫 signin ，並傳送 user、password ，回傳 JSON 資料，且有 token 的參數。</p>
<p><img src="15225992317313.jpg" alt=""></p>
<h3 id="建立取得會員資料-API"><a href="#建立取得會員資料-API" class="headerlink" title="建立取得會員資料 API"></a>建立取得會員資料 API</h3><blockquote>
<p>此 API 將取得會員資料，但必需要先有 Token 才能取得，會判斷 Token 是否有效並回傳該會員資料。</p>
</blockquote>
<p>我們可以先手動將 Token Copy 到 Headers 的 Authorization ，並且送出確認 API 是可以正常</p>
<p><img src="15225998552260.jpg" alt=""></p>
<h3 id="取得-Token-Script"><a href="#取得-Token-Script" class="headerlink" title="取得 Token Script"></a>取得 Token Script</h3><blockquote>
<p>Postman 提供了 sendRequest 這個方法，讓我們可以在利用這個方法來先呼叫 Token API 來取得 Token 。</p>
</blockquote>
<p>開始在 Pre-request Script 撰寫 Script 來自動取得 Token 並讓 Authorization 自動取讀。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// ======== 取得 Token =======</div><div class="line">pm.sendRequest(&#123;</div><div class="line">    url: &apos;http://laraauth.local/member/signin&apos;,</div><div class="line">    method: &apos;POST&apos;,</div><div class="line">    body: &#123;</div><div class="line">      mode: &apos;formdata&apos;,</div><div class="line">      formdata: [</div><div class="line">        &#123;key: &quot;name&quot;, value: &quot;duncan&quot;&#125;,</div><div class="line">        &#123;key: &quot;password&quot;, value: &quot;123123123&quot;&#125;,</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">&#125;,  function(err, response) &#123;</div><div class="line">  const jsonResponse = response.json();</div><div class="line">  pm.environment.set(&quot;signin_token&quot;, jsonResponse.token);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="15226009606961.jpg" alt=""></p>
<p>sendRequest 的使用方式蠻簡單的，跟 jQuery 的 $.ajax 有點像。</p>
<ul>
<li>url：Token API 網址</li>
<li>method：以 POST 的方式傳送</li>
<li>body：傳送參數<ul>
<li>mode：以 formdata 的格式傳送</li>
<li>formdata：傳送參數值設定</li>
</ul>
</li>
</ul>
<p>而回傳為 JSON 格式，所以在 response 後以 .json() 的方法解析 JSON ，並將回傳的 Token 儲存到 Postman 的環境變數裡。</p>
<h3 id="Authorization-取讀環境變數"><a href="#Authorization-取讀環境變數" class="headerlink" title="Authorization 取讀環境變數"></a>Authorization 取讀環境變數</h3><p>上面 Pre-request Script 裡已經將取得的 Token 以 signin_token 名稱儲存到環境變數裡，現在可以先設定讓 Authorization 取讀環境變數。</p>
<p>以雙大刮號包著變數名稱，這樣在 Send 出去時 Postman 會去讀取環境變數。</p>
<p><img src="15226024366111.jpg" alt=""></p>
<p>這邊故意將傳送的 Token 以 signin_token 變數回傳，來表示每次有取得到新的 Token 。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>先透過 Pre-request Script 呼叫可以取得 Token 的 API ，並且將 Token 存到環境變數，然後在需要傳送 Token 的地方去設定讀取環境變數，這樣就可以達到在單一一個 Collection 裡做到達要 Token 才能呼叫的 API 了。</p>
<p><img src="2018-04-02_01-11-33.gif" alt="2018-04-02_01-11-33"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 2017 年寫了一篇 「&lt;a href=&quot;https://blog.dtask.idv.tw/Postman/Postman_Token_Response_API/&quot;&gt;使用 Postman 取得 Token 打另一隻 API&lt;/a&gt;」，而那篇使用的方式是透過 Runner 的方式來達到取得 Token 再來打 API，其實還是有點麻煩，因為無法直接在單一一個 Collection 下 Send 就好。&lt;/p&gt;
&lt;p&gt;而這邊來說一下如何直接在單一一個 Collection 下 Send 來取得 Token 並且呼叫 API 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Postman" scheme="https://blog.dtask.idv.tw/tags/Postman/"/>
    
      <category term="API" scheme="https://blog.dtask.idv.tw/tags/API/"/>
    
      <category term="Token" scheme="https://blog.dtask.idv.tw/tags/Token/"/>
    
      <category term="Pre-request Script" scheme="https://blog.dtask.idv.tw/tags/Pre-request-Script/"/>
    
  </entry>
  
  <entry>
    <title>Laravel Testing Decoded (導讀) 第三章 PHPUnit 配置</title>
    <link href="https://blog.dtask.idv.tw/Books/Laravel_Testing_Decoded_Chapter_3/"/>
    <id>https://blog.dtask.idv.tw/Books/Laravel_Testing_Decoded_Chapter_3/</id>
    <published>2017-03-29T16:00:00.000Z</published>
    <updated>2018-03-06T14:38:41.588Z</updated>
    
    <content type="html"><![CDATA[<p>PHPUnit 提供了大量的配置選項，其中許多都不會使用。在本章中，將介紹一些最有用的選項，並建立一個 XML 配置檔來儲存這些設定。</p>
<h2 id="選項"><a href="#選項" class="headerlink" title="選項"></a>選項</h2><h3 id="Technicolor-彩色"><a href="#Technicolor-彩色" class="headerlink" title="Technicolor(彩色)"></a>Technicolor(彩色)</h3><p>雖然黑白也是可以，但建議你在運行測試時啟用彩色輸出，與交通號誌類似，簡單的綠色、紅色輸出可以幫助加快你的開發工作流程，我們對顏色的反應比文字快。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit --colors</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="2017-03-03_00-03-52.jpg" alt="2017-03-03_00-03-52"></p>
<p><img src="2017-03-03_00-04-07.jpg" alt="2017-03-03_00-04-07"></p>
<h3 id="Bootstrapping-引導"><a href="#Bootstrapping-引導" class="headerlink" title="Bootstrapping(引導)"></a>Bootstrapping(引導)</h3><p>有時你需要在執行測試之前要載入某些檔案，一個完美的例子在執行任何測試之前確保載入 Composer 的 autoload 腳本，雖然可以在每個 Test Class 開頭手動載入，但最好還是利過 PHPUnit 的 bootstrap 設定，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit --bootstrap=&quot;vendor/autoload.php&quot;</div></pre></td></tr></table></figure>
<h3 id="輸出格式"><a href="#輸出格式" class="headerlink" title="輸出格式"></a>輸出格式</h3><p>除了預設的測試報告，PHPUnit 還提供兩個選項 –tap 以及 –testdox 。</p>
<p>TAP 是 Test Anything Protocol 的縮寫</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit --tap tests</div></pre></td></tr></table></figure>
<p><img src="2017-03-03_00-08-31.jpg" alt="2017-03-03_00-08-31"></p>
<p>TestDox 格式以稍微不同的方式，它會讀取測試 Methods 名稱，並將依照 camelCase 名稱轉換為可讀的句子，例如 testRedirectsToHomePageOnSave 會轉換為 Redirects To Home Page On Save 。</p>
<p><img src="2017-03-03_00-09-29.jpg" alt="2017-03-03_00-09-29"></p>
<p>這有助於了解哪些測試成功的俯視圖以及提供文件，這是寫測試的一個優點：免費文件。</p>
<h2 id="XML-配置檔"><a href="#XML-配置檔" class="headerlink" title="XML 配置檔"></a>XML 配置檔</h2><p>如果你以為每次使用 PHPUnit 都要輸入這麼多選項，那麼你錯了，並不需要這樣：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit --bootstrap=&quot;vendor/autoload.php&quot; --testdox --colors tests</div></pre></td></tr></table></figure>
<p>相反的，利用 PHPUnit 讀取配置檔的功能，讓我們回顧一下最簡單的例子，在專案的根目錄中，建立一個 phpunit.xml 的檔案並輸入：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">phpunit</span> <span class="attr">colors</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">phpunit</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用這句，就可以不需要在執行測試時使用 –colors 這個 tag ，讓我們更加利用這個配置檔，使用一些其它的 option</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">phpunit</span> <span class="attr">bootstrap</span>=<span class="string">"vendor/autoload.php"</span></span></div><div class="line">         <span class="attr">colors</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertErrorsToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertNoticesToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertWarningsToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">stopOnFailure</span>=<span class="string">"true"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">phpunit</span>&gt;</span></div></pre></td></tr></table></figure>
<p>前兩個屬性已經是你所熟悉的，其餘看個人的選擇，我傾向將所有錯誤、通知、警告轉換為異常，此外，如果一個測試失敗，那麼我想取消剩餘的測試，有些人可能不喜歡，但如果你只關心修復第一個錯誤，那也不需要執行之後數以百計的測試。</p>
<p>依據目前的情況，我們仍然要手動指定路徑，這樣不太好，設置自定義目錄，使用一個 <testsuites> 設定以及多個 <testsuite> 設定，例：</testsuite></testsuites></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">phpunit</span> <span class="attr">bootstrap</span>=<span class="string">"vendor/autoload.php"</span></span></div><div class="line">         <span class="attr">colors</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertErrorsToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertNoticesToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertWarningsToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">stopOnFailure</span>=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">testsuites</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">testsuite</span> <span class="attr">name</span>=<span class="string">"Test Suite"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>tests<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">testsuite</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">testsuites</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">phpunit</span>&gt;</span></div></pre></td></tr></table></figure>
<p>當你只想測試你所有測試套件裡的某個子集，這種方式可以大大增加靈活度，增加一個專門用於整合測試的測試套件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">testsuites</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">testsuite</span> <span class="attr">name</span>=<span class="string">"Test Suite"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>tests<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">testsuite</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">testsuite</span> <span class="attr">name</span>=<span class="string">"Integration"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>tests/integration<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">testsuite</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">testsuites</span>&gt;</span></div></pre></td></tr></table></figure>
<p>當你只想執行 “Integration” 這個測試套件時</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit --testsuite=&quot;Integration&quot;</div></pre></td></tr></table></figure>
<p>在本書太多數章節，我們只使用一個主測試套件，但在實務上，一定要有系統的建立測試，你不會希望在存檔進行單元測試時執行了驗收測試。</p>
<p>如果你想執行上面所列出來的所有測試，你只需要執行 phpunit 即可。</p>
<h2 id="持續測試"><a href="#持續測試" class="headerlink" title="持續測試"></a>持續測試</h2><p>每次儲存檔案時自動執行測試是一個好的方式，像 Sublime Text 這樣的輕量級編輯器不提供這種功能，但可以安裝一些工具來完成這件事</p>
<p>本書作者介紹是安裝 Ruby 的套件來達到儲檔自動執行測試，但我覺得過程有點麻煩，所以這邊介紹一下 PhpStorm 的 File Watchers 來達到自動執行測試</p>
<h3 id="安裝-PHPUnit-Notifier"><a href="#安裝-PHPUnit-Notifier" class="headerlink" title="安裝 PHPUnit Notifier"></a>安裝 PHPUnit Notifier</h3><p>要自動執行測試之前，先安裝個測試通知套件，方便在自動執行測試後，可以直接通知測試結果</p>
<p>這邊使用 <a href="https://github.com/mdarse/phpunit-notifier" target="_blank" rel="external">PHPUnit Notifier</a> 這個套件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require --dev &quot;mdarse/phpunit-notifier&quot;</div></pre></td></tr></table></figure>
<p>安裝完之後，在 phpunit.xml 裡加上監聽</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">phpunit</span> <span class="attr">bootstrap</span>=<span class="string">"vendor/autoload.php"</span></span></div><div class="line">         <span class="attr">colors</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertErrorsToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertNoticesToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">convertWarningsToExceptions</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">stopOnFailure</span>=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">testsuites</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">testsuite</span> <span class="attr">name</span>=<span class="string">"Test Suite"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>tests<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">testsuite</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">testsuites</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listeners</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class</span>=<span class="string">"PHPUnitNotifier\NotifierListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">phpunit</span>&gt;</span></div></pre></td></tr></table></figure>
<p>之後只要再這個專案底下執行測試就會跳出測試結果通知</p>
<p><img src="2017-03-18_23-59-23-2.gif" alt="2017-03-18_23-59-23-2"></p>
<p><img src="2017-03-19_00-46-29.gif" alt="2017-03-19_00-46-29"></p>
<h3 id="PhpStorm-File-Watchers"><a href="#PhpStorm-File-Watchers" class="headerlink" title="PhpStorm File Watchers"></a>PhpStorm File Watchers</h3><p>已經安裝完通知套件後，再來設定 PhpStorm File Watchers 來達到存檔自動執行測試</p>
<h4 id="開啟-Preferences-→-Tools-→-File-Watchers"><a href="#開啟-Preferences-→-Tools-→-File-Watchers" class="headerlink" title="開啟 Preferences → Tools → File Watchers"></a>開啟 Preferences → Tools → File Watchers</h4><p><img src="14898533913689.jpg" alt=""></p>
<h4 id="Choose-Template"><a href="#Choose-Template" class="headerlink" title="Choose Template"></a>Choose Template</h4><p><img src="14898534490943.jpg" alt=""></p>
<h4 id="New-Watcher"><a href="#New-Watcher" class="headerlink" title="New Watcher"></a>New Watcher</h4><p><img src="14898534899810.jpg" alt=""></p>
<p>Name：自訂名稱<br>File type：選擇 PHP<br>Scope：選擇監聽範圍</p>
<h4 id="Scopes"><a href="#Scopes" class="headerlink" title="Scopes"></a>Scopes</h4><p><img src="14898536508389.jpg" alt=""></p>
<p><img src="14898536575200.jpg" alt=""></p>
<p><img src="14898536623933.jpg" alt=""></p>
<h4 id="選擇工作目錄"><a href="#選擇工作目錄" class="headerlink" title="選擇工作目錄"></a>選擇工作目錄</h4><p><img src="14898537232955.jpg" alt=""></p>
<p>Program：這邊使用 vendor 底下的 phpunit</p>
<p><img src="14898537766452.jpg" alt=""></p>
<p><img src="14898537843987.jpg" alt=""></p>
<p><img src="14898537943359.jpg" alt=""></p>
<p>以上設定完畢之後，PhpStorm 就會依據剛設定的目錄來監聽檔案存檔後是否有異動，有異動則會自動執行剛所設定的 phpunit</p>
<p><img src="2017-03-19_00-29-34.gif" alt="2017-03-19_00-29-34"></p>
<p><img src="2017-03-19_00-30-07.gif" alt="2017-03-19_00-30-07"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHPUnit 提供了大量的配置選項，其中許多都不會使用。在本章中，將介紹一些最有用的選項，並建立一個 XML 配置檔來儲存這些設定。&lt;/p&gt;
&lt;h2 id=&quot;選項&quot;&gt;&lt;a href=&quot;#選項&quot; class=&quot;headerlink&quot; title=&quot;選項&quot;&gt;&lt;/a&gt;選項&lt;/h2&gt;&lt;h3 id=&quot;Technicolor-彩色&quot;&gt;&lt;a href=&quot;#Technicolor-彩色&quot; class=&quot;headerlink&quot; title=&quot;Technicolor(彩色)&quot;&gt;&lt;/a&gt;Technicolor(彩色)&lt;/h3&gt;&lt;p&gt;雖然黑白也是可以，但建議你在運行測試時啟用彩色輸出，與交通號誌類似，簡單的綠色、紅色輸出可以幫助加快你的開發工作流程，我們對顏色的反應比文字快。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;phpunit --colors&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Laravel" scheme="https://blog.dtask.idv.tw/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="https://blog.dtask.idv.tw/tags/PHPUnit/"/>
    
  </entry>
  
  <entry>
    <title>使用 Postman 取得 Token 打另一隻 API</title>
    <link href="https://blog.dtask.idv.tw/Postman/Postman_Token_Response_API/"/>
    <id>https://blog.dtask.idv.tw/Postman/Postman_Token_Response_API/</id>
    <published>2017-03-28T16:00:00.000Z</published>
    <updated>2017-03-28T17:02:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Copy-amp-Paste"><a href="#Copy-amp-Paste" class="headerlink" title="Copy &amp; Paste"></a>Copy &amp; Paste</h2><p>在測試 Token Based Authentication API 時，有個麻煩的地方是 Token 是需要透過 API 取得，然後其它 API 使用，但 Token 可能會有 時效性 或 一次性，所以需要手動去取得 Token ，再 Copy Paste 到其他 API 使用，相當的麻煩。</p>
<a id="more"></a>
<p>取得 Token</p>
<p><img src="14907173156296.jpg" alt=""></p>
<p>貼上 Token</p>
<p><img src="14907173747821.jpg" alt=""></p>
<h2 id="Postman-Runner、Test"><a href="#Postman-Runner、Test" class="headerlink" title="Postman Runner、Test"></a>Postman Runner、Test</h2><p>利用 Postman 提供的 Runner、Pre-request Script、Tests 三個功能搭配，可以解決手動 Copy &amp; Paste 麻煩的問題。</p>
<h3 id="Login-API"><a href="#Login-API" class="headerlink" title="Login API"></a>Login API</h3><p>1.在 Login API 的 Tests 寫個簡單的測試，確定此 API 正常回傳 HTTP CODE 200</p>
<p><img src="14907179609839.jpg" alt=""></p>
<p>2.測試是否有回傳 token</p>
<p><img src="14907183001088.jpg" alt=""></p>
<p>3.將 token 丟給 Postman 提供的物件來儲存</p>
<p><img src="14907184786027.jpg" alt=""></p>
<p>到這些 Login API 要處理的動作就完成</p>
<h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><p>1.帶入在 Login API Tests 所設定的變數</p>
<p><img src="14907187016857.jpg" alt=""></p>
<p>2.一樣寫個簡單的測試來確定 API 是可以正常的</p>
<p><img src="14907188446243.jpg" alt=""></p>
<h3 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h3><p>到此為止可以手動去 Send Login API，然後不需要自己去 Copy Token，直接再 Send User API，這樣可以吃到 token，但這樣如果遇到一次性 Token 的情況還是有點麻煩，所以可以利用 Runner 的功能。</p>
<p>1.使用 Runner 的前題，需要把一次要跑完的 Request 放在同一個 Collection 或 Folder，並且順序要調整好，Runner 會依序執行。</p>
<p><img src="14907193493411.jpg" alt=""></p>
<p>2.開啟 Runner</p>
<p><img src="14907196734060.jpg" alt=""></p>
<p>3.選擇 Collection 或 Folder</p>
<p><img src="14907201026419.jpg" alt=""></p>
<p>4.執行結果</p>
<p><img src="14907203134241.gif" alt=""></p>
<p>如果 Login、User 兩隻 API 的 Tests 都有寫正確的話，Runner 結果如果都全部 PASS，那就表示 Token 取得正常、API 回傳值如預期。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Copy-amp-Paste&quot;&gt;&lt;a href=&quot;#Copy-amp-Paste&quot; class=&quot;headerlink&quot; title=&quot;Copy &amp;amp; Paste&quot;&gt;&lt;/a&gt;Copy &amp;amp; Paste&lt;/h2&gt;&lt;p&gt;在測試 Token Based Authentication API 時，有個麻煩的地方是 Token 是需要透過 API 取得，然後其它 API 使用，但 Token 可能會有 時效性 或 一次性，所以需要手動去取得 Token ，再 Copy Paste 到其他 API 使用，相當的麻煩。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Postman" scheme="https://blog.dtask.idv.tw/tags/Postman/"/>
    
      <category term="API" scheme="https://blog.dtask.idv.tw/tags/API/"/>
    
      <category term="Token" scheme="https://blog.dtask.idv.tw/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>Laravel Testing Decoded (導讀) 第二章 介紹 PHPUnit</title>
    <link href="https://blog.dtask.idv.tw/Books/Laravel_Testing_Decoded_Chapter_2/"/>
    <id>https://blog.dtask.idv.tw/Books/Laravel_Testing_Decoded_Chapter_2/</id>
    <published>2017-02-15T16:00:00.000Z</published>
    <updated>2017-03-18T16:54:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://phpunit.de/" target="_blank" rel="external">PHPUnit</a> 是一個單元測試框架，由 <a href="https://en.wikipedia.org/wiki/Sebastian" target="_blank" rel="external">Sebastian Bergmann</a> 所開發。</p>
</blockquote>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>有幾種方式可以安裝 PHPUnit</p>
<ul>
<li>Pear</li>
<li>Composer</li>
<li>PHAR</li>
</ul>
<p>可以自由選擇你希望的方式來安裝，不過在本書中會大量利用 Laravel 以及 Composer ，會使用最簡單的途徑，在 Laravel 透過 composer.json 來進行安裝 PHPUnit</p>
<blockquote>
<p>什麼是 <a href="https://getcomposer.org/" target="_blank" rel="external">Composer</a> 呢？Composer 是一個 PHP 的套件管理工具，作為 Laravel 開發人員之前，需要基本了解 Composer 是什麼以及如何使用它</p>
</blockquote>
<a id="more"></a>
<p>在深入了解 Laravel 之前，讓我們從最基礎開始</p>
<p>建立一個新的資料夾練習，在資料夾裡新增一個 composer.json 的檔案並加入以下</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"require-dev"</span>: &#123;</div><div class="line">        <span class="attr">"phpunit/phpunit"</span>: <span class="string">"5.7.*"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意我們並沒有加到 require 中，PHPUnit 只有在開發過程中所需要，我們不需要擔心會在正式服務器上。</p>
<p>下一步是安裝以及任何其它依賴的套件，使用 command line</p>
<blockquote>
<p>假設已將 Composer 進行 global 安裝</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer install --dev</div></pre></td></tr></table></figure>
<p>如果一切順利安裝，你可以查看 vendor/bin/phpunit 、 vendor/phpunit ，試試查詢 PHPUnit 的命令列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vendor/bin/phpunit -h</div></pre></td></tr></table></figure>
<p><img src="14855404248394.jpg" alt=""></p>
<h2 id="Global-安裝"><a href="#Global-安裝" class="headerlink" title="Global 安裝"></a>Global 安裝</h2><p>在前一章節使用的方法是需要在每一個項目下透過 Composer 進行安裝 PHPUnit，你也可以將 PHPUnit 做 Global 安裝。</p>
<p>在你的 Home 目錄(或任何地方)建立一個新的資料夾，在資料夾裡新增一個 composer.json 的檔案加入你希望 Global require-dev 的套件並安裝</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"require"</span>: &#123;</div><div class="line">        <span class="attr">"phpunit/phpunit"</span>: <span class="string">"5.7.*"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下來將這個資料夾下 vendor/bin 的完整路徑加入到 ~/.bash_profile 或 ~/.zshrc (有使用 oh-my-zsh)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exportPATH=/Users/duncan/.composer/vendor/bin</div></pre></td></tr></table></figure>
<p>透過這個方式，PHPUnit 就可以在任何地方所呼叫</p>
<h3 id="使用-Composer-Global-指令"><a href="#使用-Composer-Global-指令" class="headerlink" title="使用 Composer Global 指令"></a>使用 Composer Global 指令</h3><p>前面需要手動建立資料夾、composer.json ，Composer 有提供 global 安裝的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer global require &quot;phpunit/phpunit&quot;</div></pre></td></tr></table></figure>
<p>安裝完會在 Home 目錄下建立 .composer 的資料夾，並在 ~/.bash_profile 或 ~/.zshrc (有使用 oh-my-zsh)加入以下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:$HOME/.composer/vendor/bin</div></pre></td></tr></table></figure>
<h1 id="Assertions-101"><a href="#Assertions-101" class="headerlink" title="Assertions 101"></a>Assertions 101</h1><p>開始來測試 “hello world”，在這章節，將介紹你第一個 PHPunit assertion，assertTrue</p>
<p>在你的專案下建立 tests 資料夾，並在資料夾下建立一個新檔叫 PracticeTest.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PracticeTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testHelloWorld</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $greeting = <span class="string">'Hello, World.'</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;assertTrue($greeting === <span class="string">'Hello, World.'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>執行測試來看它是否可以正常運行</p>
<p><img src="14855809576551.jpg" alt=""></p>
<p>因為我們還沒配置任何設定，所以必需指定一個路徑來進行測試，PHPUnit 會在指定的路徑下尋找測試檔案。</p>
<p>首先，請注意最後一行</p>
<p><img src="14855813652174.jpg" alt=""></p>
<p>這表示一個測試成功了，如果測試失敗，你會看到大寫 F</p>
<p><img src="14855816785819.jpg" alt=""></p>
<p>你將會時常看到測試失敗，所以要去適應它，幸運的是，這個失敗顯示被證明是非常有用的。</p>
<p>以上我們可以看到一個 testHellowWorld 測試失敗，並且是在第八行。</p>
<blockquote>
<p>為什麼會有顏色？在下一章會更深入介紹 PHPUnit 的配置選項，在那之前，使用 –colors 就會有顏色顯示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit --colors tests</div></pre></td></tr></table></figure>
<h2 id="解析一個-Test-Class-的結構"><a href="#解析一個-Test-Class-的結構" class="headerlink" title="解析一個 Test Class 的結構"></a>解析一個 Test Class 的結構</h2><p>僅管這是一個簡單的 Class，但有幾個重要並要注意的地方，以下又是一個測試程式</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PracticeTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testHelloWorld</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $greeting = <span class="string">'Hello, World.'</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;assertTrue($greeting === <span class="string">'Hello, World.'</span>, $greeting);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>File Naming：檔名是很重要的，注意我們要跟著 FooTest.php 的規範，雖然這是可以修改的</li>
<li>Matching：Class 名稱要與檔名一致</li>
<li>Inheritance：Class 要繼承 PHPUnit_Framework_TestCase，這個 Class 在使用 PHPUnit 時可用，不過，很快可以發現，在 Laravel 的測試中，會是繼承 TestCase ，如果往上查，你會發現父類別確實繼承了 PHPUnit_Framework_TestCase 。</li>
<li>Method Naming：每一個 Method 名稱應該都描述著這個測試在測什麼，並以 test 為開頭</li>
</ul>
<h2 id="assertTure"><a href="#assertTure" class="headerlink" title="assertTure"></a>assertTure</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$greeting = <span class="string">'Hello, World.'</span>;</div><div class="line"><span class="keyword">$this</span>-&gt;assertTrue($greeting == <span class="string">'Hello, World.'</span>, $greeting);</div></pre></td></tr></table></figure>
<p>希望你會發現 PHPUnit 的 test assertions 相當有可讀性，即使不了解具體細節，也很容易知道在做什麼，所有的 assertions 在 test class 都可使用，在這個例子，我們希望 $greeting 等於 “Hello, World.”</p>
<p>這個 assertTure method 接受兩個參數</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$this-&gt;assertTrue(ACTUAL, OPTIONAL MESSAGE);</div></pre></td></tr></table></figure>
<p>你會發現在 PHPUnit 裡，反向 methods 幾乎可以用，如果你要 assert 這個值為 false，那你可以使用 assertFalse</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$this-&gt;assertFalse(ACTUAL, OPTIONAL MESSAGE);</div></pre></td></tr></table></figure>
<h2 id="assertEquals"><a href="#assertEquals" class="headerlink" title="assertEquals"></a>assertEquals</h2><p>在前面的例子中，我們唯一的目標是 assert 一個變數一直等於指定的字串，雖然 assertTrue 可以使用，但在這種情況下，它不是一個最佳可讀的方式，不要忽略測試的可讀性。</p>
<p>這種介紹另一個更適合這個例子的 assertion：assertEquals</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$greeting = <span class="string">'Hello, World.'</span>;</div><div class="line"><span class="keyword">$this</span>-&gt;assertEquals(<span class="string">'Hello, World.'</span>, $greeting);</div></pre></td></tr></table></figure>
<p>這樣可讀性更好，與大多數的 PHPUnit assertions 一樣，assertEquals 接受三個參數</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$this-&gt;assertEquals(EXPECTED, ACTUAL, OPTIONAL MESSAGE);</div></pre></td></tr></table></figure>
<p>assertNotEquals 是一個反向 assertion，並接受相同的參數</p>
<p>如果你想證明兩個值是相等的，那麼明顯的使用 assertEquals 比 assertTrue 更好的選擇，即使兩個都可以使用。</p>
<p><img src="14855990151903.jpg" alt=""></p>
<h2 id="assertSame"><a href="#assertSame" class="headerlink" title="assertSame"></a>assertSame</h2><p>assertEquals 在需要更嚴格的相等比較時會失敗，例如 assert 變數等於 0？</p>
<p>你可以嘗試：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$val = <span class="number">0</span>;</div><div class="line"><span class="keyword">$this</span>-&gt;assertEquals(<span class="number">0</span>, $val);</div></pre></td></tr></table></figure>
<p>這樣是可以通過測試，但如果讓變數為 null ，這個測試還是會通過測試</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$val = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">$this</span>-&gt;assertEquals(<span class="number">0</span>, $val);  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>這這種情況下，當你需要更嚴格的比較(或有效的 ===)，那 assertSame 可以做到</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$val = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">$this</span>-&gt;assertSame(<span class="number">0</span>, $val);  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$val = <span class="number">0</span>;</div><div class="line"><span class="keyword">$this</span>-&gt;assertSame(<span class="number">0</span>, $val);  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="assertContains"><a href="#assertContains" class="headerlink" title="assertContains"></a>assertContains</h2><p>本書的目的不是教每個 assertion ，但重要的是覆蓋到要點，雖然 PHPUnit 提供了幾十個 assertions ，但你可能會發現，少數幾個就能滿足大多數的測試需求。</p>
<p>假設你有一個名字列表，需要証明該陣列包含一個特定的值，assertTrue 可以處理這個任務，但最好選擇更有可讀性的選項：assertContains 。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testLaravelDevsIncludesDayle</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $names = [<span class="string">'Taylor'</span>, <span class="string">'Shawn'</span>, <span class="string">'Dayle'</span>];</div><div class="line">    <span class="keyword">$this</span>-&gt;assertContains(<span class="string">'Dayle'</span>, $names);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>assertContains 的參數值是：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;assertContains(NEEDLE, HAYSTACK, OPTIONALMESSAGE);</div></pre></td></tr></table></figure>
<p>正如你所知道的，反向 assertion 也是可用的</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$names = [<span class="string">'Taylor'</span>, <span class="string">'Shawn'</span>, <span class="string">'Dayle'</span>];</div><div class="line"><span class="keyword">$this</span>-&gt;assertNotContains(<span class="string">'Troll'</span>, $names);  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="assertArrayHasKey"><a href="#assertArrayHasKey" class="headerlink" title="assertArrayHasKey"></a>assertArrayHasKey</h2><p>有時你需要 assert 陣列裡的 key，而不是 value</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$family = [</div><div class="line">    <span class="string">'parents'</span> =&gt; <span class="string">'Joe'</span>,</div><div class="line">    <span class="string">'children'</span> =&gt; [<span class="string">'Timmy'</span>, <span class="string">'Suzy'</span>]</div><div class="line">];</div></pre></td></tr></table></figure>
<p>在這個例子中，假設我們需要驗證 $family 裡有包含 “parents”，在這樣的情況下， assertContains 不是正確的選擇</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 無法 assert 陣列裡包含了 'parents'</span></div><div class="line"><span class="keyword">$this</span>-&gt;assertContains(<span class="string">'parents'</span>, $family);  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>我們所需要 assert 指定陣列中的一個 key 值，解決方案是 assertArrayHasKey 。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testFamilyRequiresParent</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $family = [</div><div class="line">        <span class="string">'parents'</span> =&gt; <span class="string">'Joe'</span>,</div><div class="line">        <span class="string">'children'</span> =&gt; [<span class="string">'Timmy'</span>, <span class="string">'Suzy'</span>]</div><div class="line">    ];</div><div class="line">    <span class="keyword">$this</span>-&gt;assertArrayHasKey(<span class="string">'parents'</span>, $family);  <span class="comment">// true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="assertInternalType"><a href="#assertInternalType" class="headerlink" title="assertInternalType"></a>assertInternalType</h2><p>assertInternalType 用來測試變數的型態</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;assertInternalType(EXPECTED, ACTUAL, MESSAGE);</div></pre></td></tr></table></figure>
<p>繼續上一個例子，要 assert 這個 $family 裡 parents 為字串或陣列，我們可以這樣做</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testFamilyRequiresParent</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $family = [</div><div class="line">        <span class="string">'parents'</span> =&gt; <span class="string">'Joe'</span>,</div><div class="line">        <span class="string">'children'</span> =&gt; [<span class="string">'Timmy'</span>, <span class="string">'Suzy'</span>]</div><div class="line">    ];</div><div class="line">    <span class="keyword">$this</span>-&gt;assertInternalType(<span class="string">'array'</span>, $family[<span class="string">'parents'</span>]);  <span class="comment">// false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;assertInternalType(<span class="string">'string'</span>, $family[<span class="string">'parents'</span>]);  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>或是要 assert 的型態是整數</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$age = <span class="number">25</span>;</div><div class="line"><span class="keyword">$this</span>-&gt;assertInternalType(<span class="string">'integer'</span>, $age);  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="assertInstanceOf"><a href="#assertInstanceOf" class="headerlink" title="assertInstanceOf"></a>assertInstanceOf</h2><p>時常你需要確保變數值是某個 Class 的 Instance(實體)，這在 PHPUnit 中透過 assertInstanceOf 很容易做到</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;assertInstanceOf(EXPECTED, ACTUAL, MESSAGE);</div></pre></td></tr></table></figure>
<p>範例</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $stamp;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(DateTime $stamp)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;stamp = $stamp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStamp</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;stamp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要確保 $stamp 是 PHP DateTime Class 的 Instance ，我們可以使用以下測試方式</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testStampMustBeInstanceOfDateTime</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $date = <span class="keyword">new</span> DateFormatter(<span class="keyword">new</span> DateTime);</div><div class="line">    <span class="keyword">$this</span>-&gt;assertInstanceOf(<span class="string">'DateTime'</span>, $date-&gt;getStamp());  <span class="comment">// true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Asserting-Exceptions"><a href="#Asserting-Exceptions" class="headerlink" title="Asserting Exceptions"></a>Asserting Exceptions</h2><p>在單元測試時，重要的是測試你的程式碼中每一個可能的路徑，如果使用太多條件，會讓一個 Class 或 Method 難以測試。</p>
<p>這樣的例子中可能會拋出一個異常，在 PHPUnit 我們使用 doc-blocks 來 assert exceptions . </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@expectedException</span> EXCEPTION_NAME</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>這個 doc-blocks 宣告 PHPUnit 應該期望拋出異常，如果沒有，那麼測試就會失敗。</p>
<p>假設一個 Method 如果非數字值傳入應該拋出異常</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@expectedException</span> InvalidArgumentException</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testCalculatesCommission</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $commission = <span class="keyword">new</span> Commission;</div><div class="line">    $commission-&gt;setSalePrice(<span class="string">'fifteen dollars'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>請注意，這種情況下，沒有使用 assert ，我們只是加上必要的程式碼，讓這個 Class 發生異常。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>雖然可以繼續介面每個 PHPUnit assertion ，但這是不明智的，本章涵蓋少數的 assertions 應該足夠你進行測試了，當你還需要其它功能時，再去查詢文件即可。</p>
<p>接下來在我們開始進行 Laravel 特定的測試之前，我們應該花一些時間來更全面的設定 PHPUnit 配置來滿足我們的需求</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://phpunit.de/&quot;&gt;PHPUnit&lt;/a&gt; 是一個單元測試框架，由 &lt;a href=&quot;https://en.wikipedia.org/wiki/Sebastian&quot;&gt;Sebastian Bergmann&lt;/a&gt; 所開發。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安裝&quot;&gt;&lt;a href=&quot;#安裝&quot; class=&quot;headerlink&quot; title=&quot;安裝&quot;&gt;&lt;/a&gt;安裝&lt;/h2&gt;&lt;p&gt;有幾種方式可以安裝 PHPUnit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pear&lt;/li&gt;
&lt;li&gt;Composer&lt;/li&gt;
&lt;li&gt;PHAR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以自由選擇你希望的方式來安裝，不過在本書中會大量利用 Laravel 以及 Composer ，會使用最簡單的途徑，在 Laravel 透過 composer.json 來進行安裝 PHPUnit&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什麼是 &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; 呢？Composer 是一個 PHP 的套件管理工具，作為 Laravel 開發人員之前，需要基本了解 Composer 是什麼以及如何使用它&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Laravel" scheme="https://blog.dtask.idv.tw/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="https://blog.dtask.idv.tw/tags/PHPUnit/"/>
    
  </entry>
  
  <entry>
    <title>在 CentOS 6 安裝、設定 Oracel PDO_OCI</title>
    <link href="https://blog.dtask.idv.tw/Centos/oracle_pdo_oci_in_centos_6/"/>
    <id>https://blog.dtask.idv.tw/Centos/oracle_pdo_oci_in_centos_6/</id>
    <published>2016-09-07T16:00:00.000Z</published>
    <updated>2017-01-28T04:30:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下載檔案"><a href="#下載檔案" class="headerlink" title="下載檔案"></a>下載檔案</h1><h2 id="Oracle-Instant-Client"><a href="#Oracle-Instant-Client" class="headerlink" title="Oracle Instant Client"></a>Oracle Instant Client</h2><ul>
<li>32bit → <a href="http://www.oracle.com/technetwork/topics/linuxsoft-082809.html" target="_blank" rel="external">http://www.oracle.com/technetwork/topics/linuxsoft-082809.html</a></li>
<li>64bit → <a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html" target="_blank" rel="external">http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html</a></li>
</ul>
<h2 id="oci8"><a href="#oci8" class="headerlink" title="oci8"></a>oci8</h2><p><a href="http://pecl.php.net/package/oci8" target="_blank" rel="external">http://pecl.php.net/package/oci8</a></p>
<h2 id="PDO-OCI"><a href="#PDO-OCI" class="headerlink" title="PDO_OCI"></a>PDO_OCI</h2><p><a href="https://pecl.php.net/package/pdo_oci" target="_blank" rel="external">https://pecl.php.net/package/pdo_oci</a></p>
<a id="more"></a>
<p><img src="14733272698815.jpg" alt=""></p>
<h1 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h1><h2 id="先安裝編譯套件"><a href="#先安裝編譯套件" class="headerlink" title="先安裝編譯套件"></a>先安裝編譯套件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum --enablerepo=remi-php56 install php-devel</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php-devel</div></pre></td></tr></table></figure>
<h2 id="Oracle-Instant-Client-1"><a href="#Oracle-Instant-Client-1" class="headerlink" title="Oracle Instant Client"></a>Oracle Instant Client</h2><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh oracle-instantclient11.2-basic-11.2.0.4.0-1.i386.rpm</div><div class="line">rpm -ivh oracle-instantclient11.2-devel-11.2.0.4.0-1.i386.rpm</div></pre></td></tr></table></figure>
<p>確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep oracle</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/ld.so.conf</div></pre></td></tr></table></figure>
<p>最後一行加上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/lib/oracle/11.2/client/lib/</div></pre></td></tr></table></figure>
<p>如為 64bit 版本的則改為 client64，以下全都是</p>
<h4 id="設定-link"><a href="#設定-link" class="headerlink" title="設定 link"></a>設定 link</h4><p>64bit 版本需再設定 link</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/lib/oracle/11.2/client64 /usr/lib/oracle/11.2/client</div><div class="line">ln -s /usr/include/oracle/11.2/client64 /usr/include/oracle/11.2/client</div></pre></td></tr></table></figure>
<h3 id="環境變數"><a href="#環境變數" class="headerlink" title="環境變數"></a>環境變數</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/profile</div></pre></td></tr></table></figure>
<p>最後加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export ORACLE_HOME=/usr/lib/oracle/11.2/client/</div><div class="line">export LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client:$LD_LIBRARY_PATH</div><div class="line">export NLS_LANG=&quot;AMERICAN_AMERICA.AL32UTF8&quot;</div></pre></td></tr></table></figure>
<p>讀取設定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<h2 id="oci8-1"><a href="#oci8-1" class="headerlink" title="oci8"></a>oci8</h2><h3 id="先安裝-DTRACE"><a href="#先安裝-DTRACE" class="headerlink" title="先安裝 DTRACE"></a>先安裝 DTRACE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install systemtap-sdt-devel</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/profile</div></pre></td></tr></table></figure>
<p>最後一行加上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PHP_DTRACE=yes</div></pre></td></tr></table></figure>
<p>讀取設定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<h3 id="編譯安裝"><a href="#編譯安裝" class="headerlink" title="編譯安裝"></a>編譯安裝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tar -zxvf oci8-2.0.12.tgz</div><div class="line">cd oci8-2.0.12</div><div class="line">phpize</div><div class="line">./configure --with-oci8=shared,instantclient,/usr/lib/oracle/11.2/client/lib</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Installing shared extensions:     /usr/lib/php/modules/</div></pre></td></tr></table></figure>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>建立 ini</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/php.d/20-oci8.ini</div></pre></td></tr></table></figure>
<p>加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extension=oci8.so</div></pre></td></tr></table></figure>
<p>存檔，查詢</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -i | grep oci8</div></pre></td></tr></table></figure>
<h2 id="PDO-OCI-1"><a href="#PDO-OCI-1" class="headerlink" title="PDO_OCI"></a>PDO_OCI</h2><h3 id="修改-source-code"><a href="#修改-source-code" class="headerlink" title="修改 source code"></a>修改 source code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -zxvf PDO_OCI-1.0.tgz</div><div class="line">cd PDO_OCI-1.0</div></pre></td></tr></table></figure>
<h4 id="修改-config-m4"><a href="#修改-config-m4" class="headerlink" title="修改 config.m4"></a>修改 config.m4</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi config.m4</div></pre></td></tr></table></figure>
<p>第 10~11 行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">elif test -f $PDO_OCI_DIR/lib/libclntsh.$SHLIB_SUFFIX_NAME.10.1; then</div><div class="line">  PDO_OCI_VERSION=10.1</div></pre></td></tr></table></figure>
<p>復制改為 11.2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">elif test -f $PDO_OCI_DIR/lib/libclntsh.$SHLIB_SUFFIX_NAME.11.2; then</div><div class="line">  PDO_OCI_VERSION=11.2</div></pre></td></tr></table></figure>
<p>第 121~123 行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">10.2)</div><div class="line">  PHP_ADD_LIBRARY(clntsh, 1, PDO_OCI_SHARED_LIBADD)</div><div class="line">  ;;</div></pre></td></tr></table></figure>
<p>復制改為 11.2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">11.2)</div><div class="line">  PHP_ADD_LIBRARY(clntsh, 1, PDO_OCI_SHARED_LIBADD)</div><div class="line">  ;;</div></pre></td></tr></table></figure>
<p>存檔</p>
<h4 id="修改-pdo-oci-c"><a href="#修改-pdo-oci-c" class="headerlink" title="修改 pdo_oci.c"></a>修改 pdo_oci.c</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi pdo_oci.c</div></pre></td></tr></table></figure>
<p>第 34~36 行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function_entry pdo_oci_functions[] = &#123;</div><div class="line">    &#123;NULL, NULL, NULL&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改為</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">zend_function_entry pdo_oci_functions[] = &#123;</div><div class="line">    &#123;NULL, NULL, NULL&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="編譯安裝-1"><a href="#編譯安裝-1" class="headerlink" title="編譯安裝"></a>編譯安裝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">phpize</div><div class="line">./configure --with-pdo-oci=instantclient,/usr,11.2</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Installing shared extensions:     /usr/lib/php/modules/</div></pre></td></tr></table></figure>
<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>建立 ini</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/php.d/30-pdo_oci.ini</div></pre></td></tr></table></figure>
<p>加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extension=pdo_oci.so</div></pre></td></tr></table></figure>
<p>存檔，查詢</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -i | grep oci</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下載檔案&quot;&gt;&lt;a href=&quot;#下載檔案&quot; class=&quot;headerlink&quot; title=&quot;下載檔案&quot;&gt;&lt;/a&gt;下載檔案&lt;/h1&gt;&lt;h2 id=&quot;Oracle-Instant-Client&quot;&gt;&lt;a href=&quot;#Oracle-Instant-Client&quot; class=&quot;headerlink&quot; title=&quot;Oracle Instant Client&quot;&gt;&lt;/a&gt;Oracle Instant Client&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;32bit → &lt;a href=&quot;http://www.oracle.com/technetwork/topics/linuxsoft-082809.html&quot;&gt;http://www.oracle.com/technetwork/topics/linuxsoft-082809.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;64bit → &lt;a href=&quot;http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html&quot;&gt;http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;oci8&quot;&gt;&lt;a href=&quot;#oci8&quot; class=&quot;headerlink&quot; title=&quot;oci8&quot;&gt;&lt;/a&gt;oci8&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://pecl.php.net/package/oci8&quot;&gt;http://pecl.php.net/package/oci8&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;PDO-OCI&quot;&gt;&lt;a href=&quot;#PDO-OCI&quot; class=&quot;headerlink&quot; title=&quot;PDO_OCI&quot;&gt;&lt;/a&gt;PDO_OCI&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://pecl.php.net/package/pdo_oci&quot;&gt;https://pecl.php.net/package/pdo_oci&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="https://blog.dtask.idv.tw/tags/CentOS/"/>
    
      <category term="Oracle" scheme="https://blog.dtask.idv.tw/tags/Oracle/"/>
    
      <category term="PDO_OCI" scheme="https://blog.dtask.idv.tw/tags/PDO-OCI/"/>
    
  </entry>
  
  <entry>
    <title>SourceTree - Custom Actioins</title>
    <link href="https://blog.dtask.idv.tw/Git/SourceTree-CustomActioins/"/>
    <id>https://blog.dtask.idv.tw/Git/SourceTree-CustomActioins/</id>
    <published>2016-08-18T16:00:00.000Z</published>
    <updated>2016-08-19T02:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>SourceTree 提供 Custom Actions 的功能<br>讓 User 可以自訂語法或寫 Shell Script 來執行<br>目前自己寫了三個 Shell Script</p>
<a id="more"></a>
<h1 id="備份-git"><a href="#備份-git" class="headerlink" title="備份 .git"></a>備份 .git</h1><h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><p>目的是將 project 底下的 .git 備份出去</p>
<blockquote>
<p>有時會想要測試一些 git 指令，卻又怕把 repo 搞亂、搞壞<br>所以可以先把 .git 備份起來</p>
</blockquote>
<p><strong>語法裡有使用 rm -rf 指令，請小心使用</strong><br><strong>語法裡有使用 rm -rf 指令，請小心使用</strong><br><strong>語法裡有使用 rm -rf 指令，請小心使用</strong></p>
<p>檔案路徑：~/SourceTree_Actions/backupGitFolder.sh</p>
<p><code>$1 → 在 SourceTree 使用時，設定讓它帶入 repo path，為了區別不同 product 下的 .git</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line"># 設定備份路徑</div><div class="line">backupPath=~/Downloads/backupGit/</div><div class="line"></div><div class="line"># 取得目錄名稱</div><div class="line">folderName=`basename $1`</div><div class="line"></div><div class="line"># 將目錄剛整路徑 MD5</div><div class="line">folderNameSHA=`md5 &lt;&lt;&lt; &quot;$1&quot;`</div><div class="line"></div><div class="line"># 組合備份目錄名稱</div><div class="line">backupFolderName=&quot;$&#123;folderName&#125;__$&#123;folderNameSHA&#125;__git&quot;</div><div class="line"></div><div class="line"># 刪除原備份目錄</div><div class="line">rm -rf $&#123;backupPath&#125;$&#123;backupFolderName&#125;</div><div class="line"></div><div class="line"># 將 .git copy 出去</div><div class="line">cp -rf ./.git $&#123;backupPath&#125;$&#123;backupFolderName&#125;</div></pre></td></tr></table></figure>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">建議再第一次使用時，先手動將 .git 備份出去，避免設定上出問題導至 .git 完全不見且沒備份到</div></pre></td></tr></table></figure>
<p>開啟設定介面 SourceTree → Preferences 或 快速鍵 <code>CMD + ,</code></p>
<p><img src="14715694646486.jpg" alt=""></p>
<p>切換至 Custom Actions<br>新增 Add</p>
<p><img src="14715695027809.jpg" alt=""></p>
<p>Menu Caption → <code>backupGitFolder</code> (自訂)<br>Script to run → <code>bash</code> (使用 bash 來執行 script)<br>Parameters → <code>/SourceTree_Actions/backupGitFolder.sh $REPO</code> script 路徑，且帶入參數 $REPO</p>
<p><img src="14715711110247.jpg" alt=""></p>
<p>新增完後會看到剛新增的項目</p>
<p><img src="14715695838811.jpg" alt=""></p>
<p>因為此 Script 是針對 Repo 來做處理，所以只要在任一個 Commit 上按右鍵即可<br>右鍵 → Custom Actions → Repository Actions → backupGitFolder</p>
<p><img src="14715714722480.gif" alt=""></p>
<p>執行完畢後，會出現在 Script 所設定的備份路徑</p>
<p><img src="14715716136420.jpg" alt=""></p>
<h1 id="還原-git"><a href="#還原-git" class="headerlink" title="還原 .git"></a>還原 .git</h1><h2 id="Script-1"><a href="#Script-1" class="headerlink" title="Script"></a>Script</h2><p>目的是將先前備份的 .git 還原回 product 裡</p>
<blockquote>
<p>測試一些指令後想把先前備份的 .git 還原回來</p>
</blockquote>
<p><strong>語法裡有使用 rm -rf 指令，請小心使用</strong><br><strong>語法裡有使用 rm -rf 指令，請小心使用</strong><br><strong>語法裡有使用 rm -rf 指令，請小心使用</strong></p>
<p>檔案路徑：~/SourceTree_Actions/restoreGitFolder.sh</p>
<p><code>$1 → 在 SourceTree 使用時，設定讓它帶入 repo path，為了區別不同 product 下的 .git</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line"># 設定備份路徑</div><div class="line">backupPath=~/Downloads/backupGit/</div><div class="line"></div><div class="line"># 取得目錄名稱</div><div class="line">folderName=`basename $1`</div><div class="line"></div><div class="line"># 將目錄剛整路徑 MD5</div><div class="line">folderNameSHA=`md5 &lt;&lt;&lt; &quot;$1&quot;`</div><div class="line"></div><div class="line"># 組合備份目錄名稱</div><div class="line">backupFolderName=&quot;$&#123;folderName&#125;__$&#123;folderNameSHA&#125;__git&quot;</div><div class="line"></div><div class="line">rm -rf ./.git</div><div class="line">cp -rf $&#123;backupPath&#125;$&#123;backupFolderName&#125; ./.git</div></pre></td></tr></table></figure>
<h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">建議再第一次使用時，先手動將 .git 備份出去，避免設定上出問題導至 .git 完全不見且沒備份到</div></pre></td></tr></table></figure>
<p>開啟設定介面 SourceTree → Preferences 或 快速鍵 <code>CMD + ,</code></p>
<p><img src="14715694646486.jpg" alt=""></p>
<p>切換至 Custom Actions<br>新增 Add</p>
<p><img src="14715718520080.jpg" alt=""></p>
<p>Menu Caption → <code>restoreGitFolder</code> (自訂)<br>Script to run → <code>bash</code> (使用 bash 來執行 script)<br>Parameters → <code>/SourceTree_Actions/restoreGitFolder.sh $REPO</code> script 路徑，且帶入參數 $REPO</p>
<p><img src="14715718938615.jpg" alt=""></p>
<p>新增完後會看到剛新增的項目</p>
<p><img src="14715719070371.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">由於 SourceTree 會持續針測 Repo 的變化</div><div class="line">如果一樣在 Commit 上右鍵使用的話，線圖會一直報錯</div><div class="line">所以我會關閉這個 Repo 介面，直接在 Repo List 上使用</div><div class="line">如果電腦不快 或 Repo 較大，導至做還原動作時間超過 SourceTree 針測時間還是會報錯</div><div class="line">不過可以不理它....</div></pre></td></tr></table></figure>
<p>因為此 Script 是針對 Repo 來做處理，所以要在指定的 Repo 上按右鍵<br>右鍵 → Custom Actions → Repository Actions → restoreGitFolder</p>
<p><img src="14715724056407.gif" alt=""></p>
<p>這個是報錯的畫面，意思是找不到 git log</p>
<p><img src="14715730135810.jpg" alt=""></p>
<h1 id="差異打包"><a href="#差異打包" class="headerlink" title="差異打包"></a>差異打包</h1><h2 id="Script-2"><a href="#Script-2" class="headerlink" title="Script"></a>Script</h2><p>目日是將 HEAD 與某個 commit 做差異打包</p>
<blockquote>
<p>有時在功能完成後要放到其它環境下時，該環境可能不沒有 GIT，這時會需要做差異打包上傳</p>
</blockquote>
<p>檔案路徑：~/SourceTree_Actions/archiveCustomCommit.sh</p>
<p><code>$1 → 在 SourceTree 使用時，設定讓它帶入自行選擇的 Commit SHA</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line"># 取得現在日期時間</div><div class="line">dateStr=`date +%Y%m%d%H%M%S`</div><div class="line"></div><div class="line"># 設定打包檔案放置路徑</div><div class="line">archivePath=~/Downloads/</div><div class="line"></div><div class="line"># 取得目錄名稱</div><div class="line">folderName=`basename $1`</div><div class="line"></div><div class="line"># 查詢當下的 tags name 或 commit sha</div><div class="line">currentSHA=`git rev-parse --short HEAD`</div><div class="line">currentTag=`git show-ref --tags -d | grep ^$&#123;currentSHA&#125; | sed -e &apos;s,.* refs/tags/,,&apos; -e &apos;s/\^&#123;&#125;//&apos;`</div><div class="line">if [ &quot;$&#123;currentTag&#125;&quot; = &quot;&quot; ] || [ &quot;$&#123;currentTag&#125;&quot; = &quot;HEAD&quot; ]; then</div><div class="line">    currentTag=`git rev-parse --short &quot;$&#123;currentSHA&#125;&quot;`</div><div class="line">fi</div><div class="line"></div><div class="line"># 查詢選擇的 tags name 或 commit sha</div><div class="line">diffTag=`git show-ref --tags -d | grep ^&quot;$2&quot; | sed -e &apos;s,.* refs/tags/,,&apos; -e &apos;s/\^&#123;&#125;//&apos;`</div><div class="line">if [ &quot;$&#123;diffTag&#125;&quot; = &quot;&quot; ] || [ &quot;$&#123;diffTag&#125;&quot; = &quot;HEAD&quot; ]; then</div><div class="line">    diffTag=`git rev-parse --short &quot;$2&quot;`</div><div class="line">fi</div><div class="line"></div><div class="line"># 組合打包檔名</div><div class="line">archiveFileName=&quot;$&#123;folderName&#125;__$&#123;dateStr&#125;__$&#123;currentTag&#125;_Diff_$&#123;diffTag&#125;.zip&quot;</div><div class="line"></div><div class="line"># 進行打包</div><div class="line">git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT $&#123;diffTag&#125; $&#123;currentSHA&#125; | xargs zip $&#123;archivePath&#125;$&#123;archiveFileName&#125;</div></pre></td></tr></table></figure>
<h2 id="使用方式-2"><a href="#使用方式-2" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">建議再第一次使用時，先手動將 .git 備份出去，避免設定上出問題導至 .git 完全不見且沒備份到</div></pre></td></tr></table></figure>
<p>開啟設定介面 SourceTree → Preferences 或 快速鍵 <code>CMD + ,</code></p>
<p><img src="14715694646486.jpg" alt=""></p>
<p>切換至 Custom Actions<br>新增 Add</p>
<p><img src="14715733067241.jpg" alt=""></p>
<p>Menu Caption → <code>restoreGitFolder</code> (自訂)<br>Script to run → <code>bash</code> (使用 bash 來執行 script)<br>Parameters → <code>/SourceTree_Actions/archiveCustomCommit.sh $REPO $SHA</code> Script 路徑，且帶入參數 \$REPO、\$SHA</p>
<p><img src="14715733564409.jpg" alt=""></p>
<p>新增完後會看到剛新增的項目</p>
<p><img src="14715734899658.jpg" alt=""></p>
<p>因為此 Script 是針對 HEAD 與指定 Commit 來做處理，所以要在指定的 Commit 上按右鍵<br>右鍵 → Custom Actions → archiveCustomDiffCommit</p>
<p><img src="14715736612690.gif" alt=""></p>
<p>此範例是要將 ad1e0aa 與 b5fefac 兩個 Commit 的差異做打包<br>執行完後，會在指定的目錄下看到差異打包檔</p>
<p><img src="14715738069406.jpg" alt=""></p>
<p>如果 Commit 上是有 Tag 的話</p>
<p><img src="14715739635778.gif" alt=""></p>
<p>此範例是要將 ad1e0aa 與 b5fefac(TestTag) 兩個 Commit 的差異做打包<br>執行完後，會在指定的目錄下看到差異打包檔，並且使用 Tag 來當檔名</p>
<p><img src="14715740324043.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SourceTree 提供 Custom Actions 的功能&lt;br&gt;讓 User 可以自訂語法或寫 Shell Script 來執行&lt;br&gt;目前自己寫了三個 Shell Script&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.dtask.idv.tw/tags/Git/"/>
    
      <category term="SourceTree" scheme="https://blog.dtask.idv.tw/tags/SourceTree/"/>
    
  </entry>
  
  <entry>
    <title>在 CentOS 6 安裝、設定 Observium</title>
    <link href="https://blog.dtask.idv.tw/Centos/observium_installation_in_centos_6/"/>
    <id>https://blog.dtask.idv.tw/Centos/observium_installation_in_centos_6/</id>
    <published>2016-05-30T16:00:00.000Z</published>
    <updated>2016-08-07T17:41:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="建立-Nginx-Repo-設定檔"><a href="#建立-Nginx-Repo-設定檔" class="headerlink" title="建立 Nginx Repo 設定檔"></a>建立 Nginx Repo 設定檔</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/yum.repos.d/nginx.repo</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[nginx]</div><div class="line">name=nginx repo</div><div class="line">baseurl=http://nginx.org/packages/mainline/centos/6/$basearch/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<h2 id="安裝-Nginx"><a href="#安裝-Nginx" class="headerlink" title="安裝 Nginx"></a>安裝 Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install nginx -y</div><div class="line">chkconfig nginx on</div><div class="line">service nginx start</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h1><h2 id="先建立MariaDB-repo檔"><a href="#先建立MariaDB-repo檔" class="headerlink" title="先建立MariaDB repo檔"></a>先建立MariaDB repo檔</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/yum.repos.d/MariaDB.repo</div></pre></td></tr></table></figure>
<h3 id="MariaDB-5-5"><a href="#MariaDB-5-5" class="headerlink" title="MariaDB 5.5"></a>MariaDB 5.5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#MariaDB 5.5 CentOS repository list</div><div class="line">#http://mariadb.org/mariadb/repositories/</div><div class="line">[mariadb]</div><div class="line">name=MariaDB</div><div class="line">baseurl=http://yum.mariadb.org/5.5/centos6-amd64</div><div class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</div><div class="line">gpgcheck=1</div></pre></td></tr></table></figure>
<h3 id="MariaDB-10-1-19"><a href="#MariaDB-10-1-19" class="headerlink" title="MariaDB 10.1.19"></a>MariaDB 10.1.19</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#MariaDB 10.1.19 CentOS repository list</div><div class="line">#http://mariadb.org/mariadb/repositories/</div><div class="line">[mariadb]</div><div class="line">name=MariaDB</div><div class="line">baseurl=http://yum.mariadb.org/10.1.9/centos6-amd64</div><div class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</div><div class="line">gpgcheck=1</div></pre></td></tr></table></figure>
<h2 id="安裝-MariabDB"><a href="#安裝-MariabDB" class="headerlink" title="安裝 MariabDB"></a>安裝 MariabDB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install MariaDB-client MariaDB-server -y</div><div class="line">service mysql start</div><div class="line">chkconfig mysql on</div></pre></td></tr></table></figure>
<h2 id="初始化-MariabDB"><a href="#初始化-MariabDB" class="headerlink" title="初始化 MariabDB"></a>初始化 MariabDB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysql_secure_installation</div></pre></td></tr></table></figure>
<h2 id="建立-MariabDB-帳號"><a href="#建立-MariabDB-帳號" class="headerlink" title="建立 MariabDB 帳號"></a>建立 MariabDB 帳號</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysql -u root -p</div><div class="line">grant all on *.* to [user]@&apos;%&apos; identified by &apos;[password]&apos; with grant option;</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="安裝-PHP"><a href="#安裝-PHP" class="headerlink" title="安裝 PHP"></a>安裝 PHP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum --enablerepo=remi install php php-mysql php-gd php-posix php-mcrypt \</div><div class="line">php-pear php-fpm vixie-cron net-snmp net-snmp-utils fping MySQL-python rrdtool \</div><div class="line">subversion jwhois ipmitool graphviz ImageMagick libvirt -y</div></pre></td></tr></table></figure>
<h2 id="修改-php-ini"><a href="#修改-php-ini" class="headerlink" title="修改 php.ini"></a>修改 php.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/php.ini</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cgi.fix_pathinfo=1</div><div class="line">↓</div><div class="line">cgi.fix_pathinfo=0</div></pre></td></tr></table></figure>
<h2 id="啟動PHP-FPM服務"><a href="#啟動PHP-FPM服務" class="headerlink" title="啟動PHP-FPM服務"></a>啟動PHP-FPM服務</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service php-fpm start</div><div class="line">chkconfig php-fpm on</div></pre></td></tr></table></figure>
<h2 id="配置-Nginx-設定"><a href="#配置-Nginx-設定" class="headerlink" title="配置 Nginx 設定"></a>配置 Nginx 設定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes 4;</div><div class="line">worker_cpu_affinity 0001 0010 0100 1000;</div><div class="line">worker_rlimit_nofile 1024;</div><div class="line">pid /var/run/nginx.pid;</div><div class="line"> </div><div class="line">events &#123;</div><div class="line">    use epoll;</div><div class="line">    worker_connections 2048;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">http &#123;</div><div class="line">    sendfile on;</div><div class="line">    tcp_nopush on;</div><div class="line">    tcp_nodelay on;</div><div class="line">    keepalive_timeout 65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line">    server_names_hash_bucket_size 128;</div><div class="line"> </div><div class="line">    include /etc/nginx/mime.types;</div><div class="line">    default_type application/octet-stream;</div><div class="line"> </div><div class="line">    client_header_buffer_size 2k;</div><div class="line">    large_client_header_buffers 4 4k;</div><div class="line">    open_file_cache max=102400 inactive=20s;</div><div class="line">    </div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line">  </div><div class="line">    access_log /var/log/nginx/access.log;</div><div class="line">    error_log /var/log/nginx/error.log;</div><div class="line"> </div><div class="line">    gzip on;</div><div class="line">    gzip_disable &quot;msie6&quot;;</div><div class="line"> </div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Observium"><a href="#Observium" class="headerlink" title="Observium"></a>Observium</h1><h2 id="建立-Observium-要用的-DB-帳號"><a href="#建立-Observium-要用的-DB-帳號" class="headerlink" title="建立 Observium 要用的 DB 帳號"></a>建立 Observium 要用的 DB 帳號</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> observium <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</div><div class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> observium.* <span class="keyword">TO</span> <span class="string">'observium'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'observium'</span>;</div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div></pre></td></tr></table></figure>
<h2 id="下載-Observium"><a href="#下載-Observium" class="headerlink" title="下載 Observium"></a>下載 Observium</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /opt</div><div class="line">mkdir -p /opt/observium</div><div class="line">wget http://www.observium.org/observium-community-latest.tar.gz</div><div class="line">tar -zxvf observium-community-latest.tar.gz</div></pre></td></tr></table></figure>
<h2 id="安裝-Observium"><a href="#安裝-Observium" class="headerlink" title="安裝 Observium"></a>安裝 Observium</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd observium</div><div class="line">cp config.php.default config.php</div></pre></td></tr></table></figure>
<h3 id="設定-config-php"><a href="#設定-config-php" class="headerlink" title="設定 config.php"></a>設定 config.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi config.php</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 修改 db username, password</div><div class="line">$config[&apos;db_user&apos;] = &apos;observium&apos;;</div><div class="line">$config[&apos;db_pass&apos;] = &apos;observium&apos;;</div><div class="line"></div><div class="line"># 新增設定</div><div class="line">$config[&apos;geocoding&apos;][&apos;enable&apos;] = TRUE;</div><div class="line">$config[&apos;geocoding&apos;][&apos;api&apos;] = &apos;mapquest&apos;;</div><div class="line">$config[&apos;fping&apos;] = &quot;/usr/sbin/fping&quot;;</div></pre></td></tr></table></figure>
<h3 id="安裝-Observium-資料表"><a href="#安裝-Observium-資料表" class="headerlink" title="安裝 Observium 資料表"></a>安裝 Observium 資料表</h3><blockquote>
<p>可能要執行兩次</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/observium/discovery.php -u</div></pre></td></tr></table></figure>
<h3 id="建立-logs-以及-rrd-的目錄"><a href="#建立-logs-以及-rrd-的目錄" class="headerlink" title="建立 logs 以及 rrd 的目錄"></a>建立 logs 以及 rrd 的目錄</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># log dir</div><div class="line">mkdir /opt/observium/logs</div><div class="line">chown apache:apache /opt/observium/logs</div><div class="line"></div><div class="line"># rrd dir</div><div class="line">mkdir /opt/observium/rrd</div><div class="line">chown apache:apache /opt/observium/rrd</div></pre></td></tr></table></figure>
<h3 id="設定-observium-虛擬網站的網頁目錄"><a href="#設定-observium-虛擬網站的網頁目錄" class="headerlink" title="設定 observium 虛擬網站的網頁目錄"></a>設定 observium 虛擬網站的網頁目錄</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/nginx/conf.d/default.conf</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># The default server</div><div class="line">#</div><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  [server name];</div><div class="line"></div><div class="line">    charset utf-8;</div><div class="line"></div><div class="line">    access_log /var/log/nginx/observium.access.log main;</div><div class="line">    error_log /var/log/nginx/observium.error.log warn;</div><div class="line">    </div><div class="line">    root   /opt/observium/html/;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ /index.php?$args;</div><div class="line">        index index.php  index.html index.htm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">    #</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    gzip on;</div><div class="line">    gzip_min_length 1k;</div><div class="line">    gzip_buffers 4 16k;</div><div class="line">    gzip_http_version 1.1;</div><div class="line">    gzip_comp_level 2;</div><div class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</div><div class="line">    gzip_vary on;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="建立帳號，level-10-是-admin"><a href="#建立帳號，level-10-是-admin" class="headerlink" title="建立帳號，level 10 是 admin"></a>建立帳號，level 10 是 admin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/observium/adduser.php admin [password] 10</div></pre></td></tr></table></figure>
<h3 id="調整-cronjob"><a href="#調整-cronjob" class="headerlink" title="調整 cronjob"></a>調整 cronjob</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -e</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">33 */6 * * * /opt/observium/discovery.php -h all &gt;&gt; /dev/null 2&gt;&amp;1</div><div class="line">*/5 * * * * /opt/observium/discovery.php -h new &gt;&gt; /dev/null 2&gt;&amp;1</div><div class="line">*/5 * * * * /opt/observium/poller-wrapper.py 2 &gt;&gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/crond reload</div></pre></td></tr></table></figure>
<h1 id="新增監控主機"><a href="#新增監控主機" class="headerlink" title="新增監控主機"></a>新增監控主機</h1><blockquote>
<p>Observium 不接受 IP，所要被被監控主機的IP要先去 /etc/hosts 設定假的 Domain</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/hosts</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/observium/add_device.php [hostname] public v2c</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/opt/observium/discovery.php -h all</div><div class="line">/opt/observium/poller.php -h all</div></pre></td></tr></table></figure>
<h1 id="被監控主機安裝-SNMP"><a href="#被監控主機安裝-SNMP" class="headerlink" title="被監控主機安裝 SNMP"></a>被監控主機安裝 SNMP</h1><h2 id="Centos-安裝、設定-SNMP"><a href="#Centos-安裝、設定-SNMP" class="headerlink" title="Centos 安裝、設定 SNMP"></a>Centos 安裝、設定 SNMP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install net-snmp net-snmp-utils -y</div><div class="line">chkconfig snmpd on</div><div class="line">service snmpd start</div></pre></td></tr></table></figure>
<h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">snmpwalk -c public -v 1 localhost system</div></pre></td></tr></table></figure>
<h3 id="設定-SNMP"><a href="#設定-SNMP" class="headerlink" title="設定 SNMP"></a>設定 SNMP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.orig</div><div class="line">vi /etc/snmp/snmpd.conf</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">####</div><div class="line"># First, map the community name &quot;public&quot; into a &quot;security name&quot;</div><div class="line"></div><div class="line">#       sec.name  source           community</div><div class="line">com2sec local     localhost        public</div><div class="line">com2sec mynetwork [允許IP]/32       [自訂名稱]</div><div class="line"></div><div class="line">####</div><div class="line"># Second, map the security name into a group name:</div><div class="line"></div><div class="line">#       groupName      securityModel securityName</div><div class="line">group   MyRWGroup      any           local</div><div class="line">group   MyROGroup      v2c           mynetwork</div><div class="line"></div><div class="line">####</div><div class="line"># Third, create a view for us to let the group have rights to:</div><div class="line"></div><div class="line"># Make at least  snmpwalk -v 1 localhost -c public system fast again.</div><div class="line">#       name           incl/excl     subtree              mask(optional)</div><div class="line">view    all            included      .1                   80</div><div class="line"></div><div class="line">####</div><div class="line"># Finally, grant the group read-only access to the systemview view.</div><div class="line"></div><div class="line">#       group          context sec.model sec.level prefix read write  notif</div><div class="line">access  MyRWGroup      &quot;&quot;      any       noauth    0      all  all    all</div><div class="line">access  MyROGroup      &quot;&quot;      any       noauth    0      all  none   none</div><div class="line"></div><div class="line">syslocation Taiwan</div><div class="line"></div><div class="line">disk / 10000</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service snmpd restart</div></pre></td></tr></table></figure>
<h2 id="開啟-UDP-161-Port"><a href="#開啟-UDP-161-Port" class="headerlink" title="開啟 UDP 161 Port"></a>開啟 UDP 161 Port</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/iptables</div><div class="line">-A INPUT -m state --state NEW -m udp -p udp -s [Observium Server IP] --dport 161 -j ACCEPT</div><div class="line">service iptables restart</div></pre></td></tr></table></figure>
<h2 id="測試-1"><a href="#測試-1" class="headerlink" title="測試"></a>測試</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">snmpget -v 1 -c &quot;public&quot; localhost .1.3.6.1.4.1.2021.9.1.2.1</div><div class="line"># UCD-SNMP-MIB::dskPath.1 = STRING: /</div><div class="line"></div><div class="line">snmpget -v 1 -c &quot;public&quot; localhost .1.3.6.1.4.1.2021.9.1.3.1</div><div class="line"># UCD-SNMP-MIB::dskDevice.1 = STRING: /dev/mapper/VolGroup-lv_root</div><div class="line"></div><div class="line">snmpget -v 1 -c &quot;public&quot; localhost .1.3.6.1.4.1.2021.4.5.0 </div><div class="line"># UCD-SNMP-MIB::memTotalReal.0 = INTEGER: 3973956 kB</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;h2 id=&quot;建立-Nginx-Repo-設定檔&quot;&gt;&lt;a href=&quot;#建立-Nginx-Repo-設定檔&quot; class=&quot;headerlink&quot; title=&quot;建立 Nginx Repo 設定檔&quot;&gt;&lt;/a&gt;建立 Nginx Repo 設定檔&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vi /etc/yum.repos.d/nginx.repo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[nginx]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;name=nginx repo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;baseurl=http://nginx.org/packages/mainline/centos/6/$basearch/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gpgcheck=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;enabled=1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安裝-Nginx&quot;&gt;&lt;a href=&quot;#安裝-Nginx&quot; class=&quot;headerlink&quot; title=&quot;安裝 Nginx&quot;&gt;&lt;/a&gt;安裝 Nginx&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum install nginx -y&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chkconfig nginx on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;service nginx start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Observium" scheme="https://blog.dtask.idv.tw/tags/Observium/"/>
    
      <category term="CentOS" scheme="https://blog.dtask.idv.tw/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(Maria) Master Slave Replication</title>
    <link href="https://blog.dtask.idv.tw/MySQL/mysql_master_slave_replication/"/>
    <id>https://blog.dtask.idv.tw/MySQL/mysql_master_slave_replication/</id>
    <published>2015-01-01T16:00:00.000Z</published>
    <updated>2016-08-06T06:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主機A-Master"><a href="#主機A-Master" class="headerlink" title="主機A (Master)"></a>主機A (Master)</h1><h2 id="Mater-my-cnf-設定"><a href="#Mater-my-cnf-設定" class="headerlink" title="Mater my.cnf 設定"></a>Mater my.cnf 設定</h2><p>在 [mysqld] 底下設定參數</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"># 主機 1</div><div class="line">server-id=1</div><div class="line"></div><div class="line"># 要同步的Database (可多個)</div><div class="line">binlog-do-db=[DB Name]</div><div class="line"></div><div class="line"># Binary log 只保留三天</div><div class="line">expire_logs_days=3</div><div class="line"></div><div class="line"># Log</div><div class="line">relay-log=/var/lib/mysql/mysql-relay-bin</div><div class="line">relay-log-index=/var/lib/mysql/mysql-relay-bin.index</div><div class="line">log-error=/var/lib/mysql/mysql.err</div><div class="line">master-info-file=/var/lib/mysql/mysql-master.info</div><div class="line">relay-log-info-file=/var/lib/mysql/mysql-relay-log.info</div><div class="line">log-bin=/var/lib/mysql/mysql-bin</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="進入-DB-設定"><a href="#進入-DB-設定" class="headerlink" title="進入 DB 設定"></a>進入 DB 設定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<h3 id="建立要讓-Slave-連線的帳號"><a href="#建立要讓-Slave-連線的帳號" class="headerlink" title="建立要讓 Slave 連線的帳號"></a>建立要讓 Slave 連線的帳號</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GRANT REPLICATION SLAVE ON *.* TO &apos;slave_user&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;</div><div class="line">FLUSH PRIVILEGES;</div><div class="line">FLUSH TABLES WITH READ LOCK;</div></pre></td></tr></table></figure>
<h3 id="查詢-Master-狀態"><a href="#查詢-Master-狀態" class="headerlink" title="查詢 Master 狀態"></a>查詢 Master 狀態</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show master status;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+------------------+----------+----------------+------------------+</div><div class="line">| File             | Position | Binlog_Do_DB   | Binlog_Ignore_DB |</div><div class="line">+------------------+----------+----------------+------------------+</div><div class="line">| mysql-bin.000001 |      832 | [DB Name]      |                  |</div><div class="line">+------------------+----------+----------------+------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>記下 File、Position，要設定到 Slave 主機</p>
<h1 id="主機B-Slave"><a href="#主機B-Slave" class="headerlink" title="主機B (Slave)"></a>主機B (Slave)</h1><h2 id="Mater-my-cnf-設定-1"><a href="#Mater-my-cnf-設定-1" class="headerlink" title="Mater my.cnf 設定"></a>Mater my.cnf 設定</h2><p>在 [mysqld] 底下設定參數</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"># 主機 2</div><div class="line">server-id=2</div><div class="line"></div><div class="line"># 要同步的Database (可多個)</div><div class="line">replicate-do-db=[DB Name]</div><div class="line"></div><div class="line"># Binary log 只保留三天</div><div class="line">expire_logs_days=3</div><div class="line"></div><div class="line"># Log</div><div class="line">relay-log=/var/lib/mysql/mysql-relay-bin</div><div class="line">relay-log-index=/var/lib/mysql/mysql-relay-bin.index</div><div class="line">log-error=/var/lib/mysql/mysql.err</div><div class="line">master-info-file=/var/lib/mysql/mysql-master.info</div><div class="line">relay-log-info-file=/var/lib/mysql/mysql-relay-log.info</div><div class="line">log-bin=/var/lib/mysql/mysql-bin</div></pre></td></tr></table></figure>
<h2 id="進入-DB-設定-1"><a href="#進入-DB-設定-1" class="headerlink" title="進入 DB 設定"></a>進入 DB 設定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<h3 id="停止-Slave"><a href="#停止-Slave" class="headerlink" title="停止 Slave"></a>停止 Slave</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stop slave;</div></pre></td></tr></table></figure>
<h3 id="設定-Slave"><a href="#設定-Slave" class="headerlink" title="設定 Slave"></a>設定 Slave</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CHANGE MASTER TO MASTER_HOST=&apos;[MasterIP]&apos;, MASTER_USER=&apos;[MasterUser]&apos;, MASTER_PASSWORD=&apos;[MasterPassword]&apos;, MASTER_LOG_FILE=&apos;[MasterLogFullFile]&apos;, MASTER_LOG_POS=[MasterPosition];</div></pre></td></tr></table></figure>
<h3 id="開啟-Slave"><a href="#開啟-Slave" class="headerlink" title="開啟 Slave"></a>開啟 Slave</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start slave;</div></pre></td></tr></table></figure>
<h3 id="查詢-Slave-狀態"><a href="#查詢-Slave-狀態" class="headerlink" title="查詢 Slave 狀態"></a>查詢 Slave 狀態</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show slave status \G;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">*************************** 1. row ***************************</div><div class="line">               Slave_IO_State:</div><div class="line">                  Master_Host: [Master Host IP]</div><div class="line">                  Master_User: slave_user</div><div class="line">                  Master_Port: 3306</div><div class="line">                Connect_Retry: 60</div><div class="line">              Master_Log_File: mysql-bin.000001</div><div class="line">          Read_Master_Log_Pos: 545</div><div class="line">               Relay_Log_File: mysql-relay-bin.000002</div><div class="line">                Relay_Log_Pos: 769</div><div class="line">        Relay_Master_Log_File: mysql-bin.000001</div><div class="line">             Slave_IO_Running: Yes</div><div class="line">            Slave_SQL_Running: Yes</div><div class="line">              Replicate_Do_DB: [DB Name]</div><div class="line">          Replicate_Ignore_DB:</div><div class="line">           Replicate_Do_Table:</div><div class="line">       Replicate_Ignore_Table:</div><div class="line">      Replicate_Wild_Do_Table:</div><div class="line">  Replicate_Wild_Ignore_Table:</div><div class="line">                   Last_Errno: 0</div><div class="line">                   Last_Error:</div><div class="line">                 Skip_Counter: 0</div><div class="line">          Exec_Master_Log_Pos: 545</div><div class="line">              Relay_Log_Space: 1067</div><div class="line">              Until_Condition: None</div><div class="line">               Until_Log_File:</div><div class="line">                Until_Log_Pos: 0</div><div class="line">           Master_SSL_Allowed: No</div><div class="line">           Master_SSL_CA_File:</div><div class="line">           Master_SSL_CA_Path:</div><div class="line">              Master_SSL_Cert:</div><div class="line">            Master_SSL_Cipher:</div><div class="line">               Master_SSL_Key:</div><div class="line">        Seconds_Behind_Master: NULL</div><div class="line">Master_SSL_Verify_Server_Cert: No</div><div class="line">                Last_IO_Errno: 0</div><div class="line">                Last_IO_Error:</div><div class="line">               Last_SQL_Errno: 0</div><div class="line">               Last_SQL_Error:</div><div class="line">  Replicate_Ignore_Server_Ids:</div><div class="line">             Master_Server_Id: 1</div><div class="line">               Master_SSL_Crl:</div><div class="line">           Master_SSL_Crlpath:</div><div class="line">                   Using_Gtid: No</div><div class="line">                  Gtid_IO_Pos:</div><div class="line">      Replicate_Do_Domain_Ids:</div><div class="line">  Replicate_Ignore_Domain_Ids:</div><div class="line">                Parallel_Mode: conservative</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>Slave_IO_Running、Slave_SQL_Running 需為 Yes 才是正常</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>當 Master or Slave 有做重啟動作時，需回到 Slave 查看 Slave 狀態</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show slave status \G;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主機A-Master&quot;&gt;&lt;a href=&quot;#主機A-Master&quot; class=&quot;headerlink&quot; title=&quot;主機A (Master)&quot;&gt;&lt;/a&gt;主機A (Master)&lt;/h1&gt;&lt;h2 id=&quot;Mater-my-cnf-設定&quot;&gt;&lt;a href=&quot;#Mater-my-cnf-設定&quot; class=&quot;headerlink&quot; title=&quot;Mater my.cnf 設定&quot;&gt;&lt;/a&gt;Mater my.cnf 設定&lt;/h2&gt;&lt;p&gt;在 [mysqld] 底下設定參數&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[mysqld]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 主機 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server-id=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 要同步的Database (可多個)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;binlog-do-db=[DB Name]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Binary log 只保留三天&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;expire_logs_days=3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Log&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;relay-log=/var/lib/mysql/mysql-relay-bin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;relay-log-index=/var/lib/mysql/mysql-relay-bin.index&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log-error=/var/lib/mysql/mysql.err&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;master-info-file=/var/lib/mysql/mysql-master.info&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;relay-log-info-file=/var/lib/mysql/mysql-relay-log.info&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log-bin=/var/lib/mysql/mysql-bin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://blog.dtask.idv.tw/tags/MySQL/"/>
    
      <category term="Maria" scheme="https://blog.dtask.idv.tw/tags/Maria/"/>
    
  </entry>
  
</feed>
